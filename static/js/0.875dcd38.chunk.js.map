{"version":3,"sources":["tonwa-react/auth/register/VStart.tsx","tonwa-react/auth/register/VVerify.tsx","tonwa-react/auth/register/VPassword.tsx","tonwa-react/auth/register/VSuccess.tsx","tonwa-react/auth/register/CRegister.ts"],"names":["VStart","schema","name","type","required","maxLength","uiSchema","onSubmit","context","a","clearContextErrors","user","value","getValue","undefined","sender","getSender","setError","length","controller","account","checkAccount","ret","onEnter","this","items","widget","label","accountLable","placeholder","verify","className","pageCaption","style","marginLeft","marginRight","tonwa","loginTop","defaultLoginTop","onButtonClick","requiredFlag","href","privacyEntry","VPage","VRegisterStart","VForgetStart","VVerify","onVerifyChanged","prev","setDisabled","onChanged","submit","disabled","onVerify","typeText","extra","VPassword","onButtonSubmit","values","form","data","pwd","rePwd","setValue","error","onPasswordSubmit","nav","push","header","submitCaption","VRegisterPassword","VForgetPassword","VSuccess","VRegisterSuccess","login","onClick","VForgetSuccess","CRegBase","password","web","userApi","guest","retUser","alert","userLogined","isWebNav","navigate","openVPage","checkVerify","toPassword","isExists","accountError","sendVerify","oem","toVerify","ControllerWithWeb","CRegister","params","nick","country","mobile","mobileCountry","email","Number","register","clear","toSuccess","regReturn","registerReturn","msg","CForget","resetPassword","err","console","log"],"mappings":"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","file":"static/js/0.875dcd38.chunk.js","sourcesContent":["import { VPage } from \"../../vm\";\r\nimport { defaultLoginTop, getSender } from '../tools';\r\nimport { Schema, UiSchema, UiTextItem, UiButton, Form, Context, StringSchema, Ax } from '../../components';\r\nimport { CForget, CRegBase, CRegister } from './CRegister';\r\n\r\nexport abstract class VStart<T extends CRegBase> extends VPage<T> {\r\n    private schema: Schema = [\r\n        { name: 'user', type: 'string', required: true, maxLength: 100 } as StringSchema,\r\n        { name: 'verify', type: 'submit' },\r\n    ]\r\n    private uiSchema: UiSchema;\r\n\r\n    abstract get accountLable(): string;\r\n    abstract get pageCaption(): string;\r\n\r\n    init() {\r\n        this.uiSchema = {\r\n            items: {\r\n                user: {\r\n                    widget: 'text',\r\n                    label: this.accountLable,\r\n                    placeholder: '手机号或邮箱',\r\n                } as UiTextItem,\r\n                verify: { widget: 'button', className: 'btn btn-primary btn-block mt-3', label: '发送验证码' } as UiButton,\r\n            }\r\n        }\r\n    }\r\n\r\n    header() { return this.pageCaption; }\r\n\r\n    content(): JSX.Element {\r\n        return <div className=\"w-max-20c my-5 py-5\"\r\n            style={{ marginLeft: 'auto', marginRight: 'auto' }}>\r\n            {this.tonwa.loginTop(defaultLoginTop)}\r\n            <div className=\"h-3c\" />\r\n            <Form schema={this.schema} uiSchema={this.uiSchema}\r\n                onButtonClick={this.onSubmit}\r\n                onEnter={this.onEnter}\r\n                requiredFlag={false} />\r\n            <div className=\"text-center py-3\">\r\n                <Ax href=\"/login\" className=\"text-primary\">已有账号，直接登录</Ax>\r\n            </div>\r\n            {this.tonwa.privacyEntry()}\r\n        </div>;\r\n    }\r\n\r\n    private onSubmit = async (name: string, context: Context): Promise<string> => {\r\n        context.clearContextErrors();\r\n        let user = 'user';\r\n        let value = context.getValue(user);\r\n        let sender = getSender(value);\r\n        if (sender === undefined) {\r\n            context.setError(user, '必须是手机号或邮箱');\r\n            return;\r\n        }\r\n        let type: 'mobile' | 'email' = sender.type as 'mobile' | 'email';\r\n        if (type === 'mobile') {\r\n            if (value.length !== 11 || value[0] !== '1') {\r\n                context.setError(user, '请输入正确的手机号');\r\n                return;\r\n            }\r\n        }\r\n        this.controller.account = value;\r\n        this.controller.type = type;\r\n        let ret = await this.controller.checkAccount();\r\n        if (ret !== undefined) context.setError(user, ret);\r\n    }\r\n\r\n    private onEnter = async (name: string, context: Context): Promise<string> => {\r\n        if (name === 'user') {\r\n            return await this.onSubmit('verify', context);\r\n        }\r\n    }\r\n}\r\n\r\nexport class VRegisterStart extends VStart<CRegister> {\r\n    get accountLable(): string { return '账号' }\r\n    get pageCaption(): string { return '注册账号' }\r\n}\r\n\r\nexport class VForgetStart extends VStart<CForget> {\r\n    footer(): JSX.Element { return null; }\r\n    get accountLable(): string { return '账号' }\r\n    get pageCaption(): string { return '密码找回' }\r\n}\r\n","import { VPage } from \"../../vm\";\r\nimport { CRegBase } from \"./CRegister\";\r\nimport {Schema, UiSchema, UiTextItem, UiButton, Form, Context, NumSchema} from '../../components';\r\n\r\nexport class VVerify extends VPage<CRegBase> {\r\n    private schema: Schema = [\r\n        {name: 'verify', type: 'number', required: true, maxLength: 6} as NumSchema,\r\n        {name: 'submit', type: 'submit'},\r\n    ]\r\n\r\n    private onVerifyChanged = (context:Context, value:any, prev:any) => {\r\n        context.setDisabled('submit', !value || (value.length !== 6));\r\n    }\r\n    private uiSchema: UiSchema = {\r\n        items: {\r\n            verify: {\r\n                widget: 'text',\r\n                label: '验证码',\r\n                placeholder: '请输入验证码',\r\n                onChanged: this.onVerifyChanged,\r\n            } as UiTextItem, \r\n            submit: {\r\n                widget: 'button', \r\n                className: 'btn btn-primary btn-block mt-3', \r\n                label: '下一步 >',\r\n                disabled: true\r\n            } as UiButton,\r\n        }\r\n\t}\r\n\t\r\n\tprivate onVerify: (verify:string) => Promise<number>;\r\n\tinit(onVerify: (verify:string) => Promise<number>) {\r\n\t\tthis.onVerify = onVerify;\r\n\t}\r\n\r\n\tprivate onSubmit = async (name:string, context:Context):Promise<string> => {\r\n        let verify = context.getValue('verify');\r\n        let ret = await this.onVerify(verify);\r\n        if (ret === 0) {\r\n            context.setError('verify', '验证码错误');\r\n            return;\r\n        }\r\n    }\r\n\r\n    private onEnter = async (name:string, context:Context):Promise<string> => {\r\n        if (name === 'verify') {\r\n            return await this.onSubmit('submit', context);\r\n        }\r\n    }\r\n\r\n\theader() {return '验证码'}\r\n\r\n\tcontent() {\r\n        let typeText:string, extra:any;\r\n        switch (this.controller.type) {\r\n            case 'mobile': typeText = '手机号'; break;\r\n            case 'email': \r\n                typeText = '邮箱'; \r\n                extra = <><span className=\"text-danger\">注意</span>: 有可能误为垃圾邮件，请检查<br/></>;\r\n                break;\r\n        }\r\n        return <div className=\"w-max-20c my-5 py-5\"\r\n\t\t\tstyle={{marginLeft:'auto', marginRight:'auto'}}>\r\n\t\t\t验证码已经发送到{typeText}<br/>\r\n\t\t\t<div className=\"py-2 px-3 my-2 text-primary bg-light\"><b>{this.controller.account}</b></div>\r\n\t\t\t{extra}\r\n\t\t\t<div className=\"h-1c\" />\r\n\t\t\t<Form schema={this.schema} uiSchema={this.uiSchema} \r\n\t\t\t\tonButtonClick={this.onSubmit} \r\n\t\t\t\tonEnter={this.onEnter}\r\n\t\t\t\trequiredFlag={false} />\r\n\t\t</div>;\r\n    }\r\n}\r\n","import { VPage } from \"../../vm\";\r\nimport { Page, Schema, UiSchema, UiPasswordItem, UiButton, Form, Context, StringSchema } from '../../components';\r\nimport { CForget, CRegBase, CRegister } from './CRegister';\r\n\r\nexport abstract class VPassword<T extends CRegBase> extends VPage<T> {\r\n\tprotected abstract get pageCaption():string;\r\n\tprotected abstract get submitCaption():string;\r\n\r\n\tget account():string {return this.controller.account}\r\n\r\n    private schema: Schema = [\r\n        {name: 'pwd', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n        {name: 'rePwd', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n        {name: 'submit', type: 'submit'},\r\n    ]\r\n\r\n\tprivate onButtonSubmit = async (name:string, context:Context):Promise<string> => {\r\n        let values = context.form.data;\r\n        let {pwd, rePwd} = values;\r\n        let error:string;\r\n        if (!pwd || pwd !== rePwd) {\r\n            context.setValue('pwd', '');\r\n            context.setValue('rePwd', '');\r\n            error = '密码错误，请重新输入密码！';\r\n            context.setError('pwd', error);\r\n        }\r\n        else {\r\n\t\t\terror = await this.controller.onPasswordSubmit(pwd);\r\n            if (error !== undefined) {\r\n                this.nav.push(<Page header=\"注册不成功\"><div className=\"p-5 text-danger\">{error}</div></Page>);\r\n            }\r\n        }\r\n        return error;\r\n    }\r\n    private onEnter = async (name:string, context:Context):Promise<string> => {\r\n        if (name === 'rePwd') {\r\n            return await this.onButtonSubmit('submit', context);\r\n        }\r\n    }\r\n\t\r\n\theader() {\r\n\t\treturn this.pageCaption;\r\n\t}\r\n\r\n\tcontent() {\r\n\t\tlet uiSchema: UiSchema = {\r\n\t\t\titems: {\r\n\t\t\t\tpwd: {widget: 'password', placeholder: '密码', label: '密码'} as UiPasswordItem,\r\n\t\t\t\trePwd: {widget: 'password', placeholder: '重复密码', label: '重复密码'} as UiPasswordItem,\r\n\t\t\t\tsubmit: {widget: 'button', className: 'btn btn-primary btn-block mt-3', label: this.submitCaption} as UiButton,\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn <div className=\"w-max-20c my-5 py-5\"\r\n\t\t\tstyle={{marginLeft:'auto', marginRight:'auto'}}>\r\n\t\t\t注册账号<br/>\r\n\t\t\t<div className=\"py-2 px-3 my-2 text-primary bg-light\"><b>{this.account}</b></div>\r\n\t\t\t<div className=\"h-1c\" />\r\n\t\t\t<Form schema={this.schema} uiSchema={uiSchema}\r\n\t\t\t\tonButtonClick={this.onButtonSubmit}\r\n\t\t\t\tonEnter={this.onEnter}\r\n\t\t\t\trequiredFlag={false} />\r\n\t\t</div>;\r\n    }\r\n}\r\n\r\nexport class VRegisterPassword extends VPassword<CRegister> {\r\n\tget pageCaption():string {return '注册账号'}\r\n\tget submitCaption():string {return '注册新账号'}\r\n}\r\n\r\nexport class VForgetPassword extends VPassword<CForget> {\r\n\tget pageCaption():string {return '账号密码'}\r\n\tget submitCaption():string {return '改密码'}\r\n}\r\n","import { VPage } from \"../../vm\";\r\nimport { CRegBase } from './CRegister';\r\n\r\nexport abstract class VSuccess extends VPage<CRegBase> {\r\n\theader() {return false;}\r\n}\r\n\r\nexport class VRegisterSuccess extends VSuccess {\r\n\tcontent() {\r\n    \tconst {account, login} = this.controller;\r\n\t\treturn <div className=\"container w-max-30c\">\r\n\t\t\t<div className=\"my-5\">\r\n\t\t\t\t<div className=\"py-5 text-center\">\r\n\t\t\t\t\t账号 <strong className=\"text-primary\">{account} </strong> 注册成功！\r\n\t\t\t\t</div>\r\n\t\t\t\t<button className=\"btn btn-success btn-block\" type=\"button\" onClick={()=>login(undefined)}>\r\n\t\t\t\t\t直接登录\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t</div>;\r\n\t}\r\n}\r\n\r\nexport class VForgetSuccess extends VSuccess {\r\n\tcontent() {\r\n    \tconst {login} = this.controller;\r\n\t\treturn <div className=\"container w-max-30c\">\r\n\t\t\t<div className=\"my-5\">\r\n\t\t\t\t<div className=\"py-5 text-center text-success\">成功修改密码</div>\r\n\t\t\t\t<button className=\"btn btn-primary btn-block\" onClick={()=>login()}>\r\n\t\t\t\t\t登录账号\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t}\t\r\n}\r\n","import { Controller, ControllerWithWeb, VPage } from \"../../vm\";\r\n//import { nav } from '../../components';\r\nimport { VRegisterStart, VForgetStart } from './VStart';\r\nimport { RegisterParameter } from 'tonwa-core';\r\nimport { VVerify } from './VVerify';\r\nimport { VRegisterPassword, VForgetPassword } from './VPassword';\r\nimport { VForgetSuccess, VRegisterSuccess } from \"./VSuccess\";\r\n\r\nexport abstract class CRegBase extends ControllerWithWeb {\r\n    account: string;\r\n    type: 'mobile' | 'email';\r\n    password: string;\r\n    verify: string;\r\n\r\n    protected abstract get VStart(): new (c: Controller) => VPage<any>;\r\n    protected async internalStart() {\r\n        this.openVPage(this.VStart);\r\n    }\r\n\r\n    protected get VVerify(): new (c: Controller) => VPage<any> { return VVerify as any };\r\n    toVerify() {\r\n        //this.account = account;\r\n        this.openVPage(this.VVerify, async (verify: string) => {\r\n            this.verify = verify;\r\n            let ret = await this.web.userApi.checkVerify(this.account, verify);\r\n            if (ret === 0) return ret;\r\n            this.toPassword();\r\n        });\r\n    }\r\n\r\n    protected abstract get VPassword(): new (c: Controller) => VPage<any>;\r\n    toPassword() {\r\n        this.openVPage(this.VPassword);\r\n    }\r\n\r\n    protected abstract get VSuccess(): new (c: Controller) => VPage<any>;\r\n    toSuccess() {\r\n        this.openVPage(this.VSuccess);\r\n    }\r\n\r\n    login = async (account?: string) => {\r\n        let retUser = await this.web.userApi.login({ user: account || this.account, pwd: this.password, guest: this.tonwa.guest });\r\n        if (retUser === undefined) {\r\n            alert('something wrong!');\r\n            return;\r\n        }\r\n        await this.tonwa.userLogined(retUser);\r\n        //await nav.start();\r\n        if (this.isWebNav) this.tonwa.navigate('/');\r\n    }\r\n\r\n    async checkAccount(): Promise<string> {\r\n        let ret = await this.web.userApi.isExists(this.account);\r\n        let error = this.accountError(ret);\r\n        if (error !== undefined) return error;\r\n        ret = await this.web.userApi.sendVerify(this.account, this.type, this.tonwa.oem);\r\n        this.toVerify();\r\n        return;\r\n    }\r\n\r\n    protected abstract accountError(isExists: number): string;\r\n    abstract onPasswordSubmit(pwd: string): Promise<string>;\r\n}\r\n\r\nexport class CRegister extends CRegBase {\r\n    protected get VStart(): new (c: Controller) => VPage<any> { return VRegisterStart as any };\r\n    protected get VPassword(): new (c: Controller) => VPage<any> { return VRegisterPassword as any };\r\n    protected get VSuccess(): new (c: Controller) => VPage<any> { return VRegisterSuccess as any }\r\n    protected accountError(isExists: number) {\r\n        if (isExists > 0) return '已经被注册使用了';\r\n    }\r\n\r\n    async onPasswordSubmit(pwd: string): Promise<string> {\r\n        this.password = pwd;\r\n        let params: RegisterParameter = {\r\n            nick: undefined,\r\n            user: this.account,\r\n            pwd,\r\n            country: undefined,\r\n            mobile: undefined,\r\n            mobileCountry: undefined,\r\n            email: undefined,\r\n            verify: this.verify\r\n        }\r\n        switch (this.type) {\r\n            case 'mobile':\r\n                params.mobile = Number(this.account);\r\n                params.mobileCountry = 86;\r\n                break;\r\n            case 'email':\r\n                params.email = this.account;\r\n                break;\r\n        }\r\n        let ret = await this.web.userApi.register(params);\r\n        if (ret === 0) {\r\n            this.tonwa.nav.clear();\r\n            this.toSuccess();\r\n            return;\r\n        }\r\n        let error = this.regReturn(ret)\r\n        return error;\r\n    }\r\n\r\n    private regReturn(registerReturn: number): string {\r\n        let msg: any;\r\n        switch (registerReturn) {\r\n            default: return '服务器发生错误';\r\n            case 4: return '验证码错误';\r\n            case 0: return;\r\n            case 1: msg = '用户名 ' + this.account; break;\r\n            case 2: msg = '手机号 +' + this.account; break;\r\n            case 3: msg = '邮箱 ' + this.account; break;\r\n        }\r\n        return msg + ' 已经被注册过了';\r\n    }\r\n}\r\n\r\nexport class CForget extends CRegBase {\r\n    protected get VStart(): new (c: Controller) => VPage<any> { return VForgetStart as any };\r\n    protected get VPassword(): new (c: Controller) => VPage<any> { return VForgetPassword as any };\r\n    protected get VSuccess(): new (c: Controller) => VPage<any> { return VForgetSuccess as any }\r\n    protected accountError(isExists: number) {\r\n        if (isExists === 0) return '请输入正确的账号';\r\n    }\r\n    async onPasswordSubmit(pwd: string): Promise<string> {\r\n        this.password = pwd;\r\n        let ret = await this.web.userApi.resetPassword(this.account, this.password, this.verify, this.type);\r\n        if (ret.length === 0) {\r\n            let err = 'something wrong in reseting password';\r\n            console.log(err);\r\n            throw err;\r\n        }\r\n        this.tonwa.nav.clear();\r\n        this.toSuccess();\r\n        return;\r\n    }\r\n}\r\n\r\n"],"sourceRoot":""}